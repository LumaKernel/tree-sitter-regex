===================
sequence match
===================
hello
---

(pattern (term
  (atom (pattern_character))
  (atom (pattern_character))
  (atom (pattern_character))
  (atom (pattern_character))
  (atom (pattern_character))
))

===================
sequence match w/ '.' atom
===================
he..o
---

(pattern (term
  (atom (pattern_character))
  (atom (pattern_character))
  (atom)
  (atom)
  (atom (pattern_character))
))

===================
quantifiers
===================
h*?e*l+.?
---

(pattern (term
  (atom (pattern_character))
    (quantifier (quantifier_prefix) (non_greedy))
  (atom (pattern_character))
    (quantifier (quantifier_prefix))
  (atom (pattern_character))
    (quantifier (quantifier_prefix))
  (atom)
    (quantifier (quantifier_prefix))
))


===================
quantifiers - count
===================
h{1,2}?el{1,2}.{3}
---

(pattern (term
  (atom (pattern_character))
  (quantifier
    (quantifier_prefix
      (count_quantifier (decimal_digits) (decimal_digits))
    )
    (non_greedy)
  )
  (atom (pattern_character))
  (atom (pattern_character))
  (quantifier (quantifier_prefix
    (count_quantifier (decimal_digits) (decimal_digits))
  ))
  (atom)
  (quantifier (quantifier_prefix
    (count_quantifier (decimal_digits))
  ))
))

===================
disjunctions
===================
he..o|wo.ld
---

(pattern (disjunction
  (term
    (atom (pattern_character))
    (atom (pattern_character))
    (atom)
    (atom)
    (atom (pattern_character))
  )
  (term
    (atom (pattern_character))
    (atom (pattern_character))
    (atom)
    (atom (pattern_character))
    (atom (pattern_character))
  )
))

===================
disjunctions with empty terms
===================
||he..o||wo.ld|||
---

(pattern (disjunction
  (term
    (atom (pattern_character))
    (atom (pattern_character))
    (atom)
    (atom)
    (atom (pattern_character))
  )
  (term
    (atom (pattern_character))
    (atom (pattern_character))
    (atom)
    (atom (pattern_character))
    (atom (pattern_character))
  )
))

===================
assertions - line start / end
===================
^he..o$
---

(pattern (term
  (atom (assertion))
  (atom (pattern_character))
  (atom (pattern_character))
  (atom)
  (atom)
  (atom (pattern_character))
  (atom (assertion))
))

===================
assertions - word boundary
===================
\Bhe..o\b
---

(pattern (term
  (atom (assertion))
  (atom (pattern_character))
  (atom (pattern_character))
  (atom)
  (atom)
  (atom (pattern_character))
  (atom (assertion))
))


===================
disjunction w empty terms & assertions
===================
^he..o$||w..ld$
---

(pattern (disjunction
  (term
    (atom (assertion))
    (atom (pattern_character))
    (atom (pattern_character))
    (atom)
    (atom)
    (atom (pattern_character))
    (atom (assertion)))
  (term
    (atom (pattern_character))
    (atom)
    (atom)
    (atom (pattern_character))
    (atom (pattern_character))
    (atom (assertion)))
))

===================
lookahead
===================
Jack(?=Sprat)
---

(pattern (term
    (atom (pattern_character))
    (atom (pattern_character))
    (atom (pattern_character))
    (atom (pattern_character))
    (atom (assertion (pattern (term
      (atom (pattern_character))
      (atom (pattern_character))
      (atom (pattern_character))
      (atom (pattern_character))
      (atom (pattern_character))
    ))))
))

===================
character classes
===================
[A-Za-z][^Xx]
---

(pattern (term
  (atom (character_class
    (class_range (class_atom) (class_atom))
    (class_range (class_atom) (class_atom))
  ))
  (atom (character_class
    (class_range (class_atom))
    (class_range (class_atom))
  ))
))

===================
character classes - '-' is an atom
===================
[-]
---
(pattern (term
  (atom (character_class
    (class_range (class_atom))
  ))
))

===================
character classes - /[---]/ is odd but valid
===================
[---]
---
(pattern (term
  (atom (character_class
    (class_range (class_atom) (class_atom))
  ))
))

===================
character classes - identity escapes
===================
[\-\.]
---
(pattern (term
  (atom (character_class
    (class_range (class_atom (class_escape)))
    (class_range (class_atom (class_escape
      (character_escape (identity_escape))
    )))
  ))
))

===================
non-capturing groups
===================
Jack(?:Sprat)
---

(pattern (term
    (atom (pattern_character))
    (atom (pattern_character))
    (atom (pattern_character))
    (atom (pattern_character))
    (atom (non_capturing_group (pattern (term
      (atom (pattern_character))
      (atom (pattern_character))
      (atom (pattern_character))
      (atom (pattern_character))
      (atom (pattern_character))
    ))))
))

===================
atom escapes - character class escapes
===================
\S\w\cZ
---

(pattern (term
  (atom (atom_escape (character_class_escape)))
  (atom (atom_escape (character_class_escape)))
  (atom (atom_escape (character_escape (control_letter))))
))

===================
atom escapes - control escapes
===================
\f\n\r\t\v\0
---

(pattern (term
  (atom (atom_escape (character_escape (control_escape))))
  (atom (atom_escape (character_escape (control_escape))))
  (atom (atom_escape (character_escape (control_escape))))
  (atom (atom_escape (character_escape (control_escape))))
  (atom (atom_escape (character_escape (control_escape))))
  (atom (atom_escape (character_escape (control_escape))))
))

===================
atom escapes - decimal escapes
===================
\8230
---

(pattern (term
  (atom (atom_escape (decimal_escape)))
))

===================
atom escapes - unicode property value expressions
===================
\p{General_Category=Decimal_Number}
---

(pattern (term
  (atom (atom_escape (character_class_escape
    (unicode_property_value_expression
      (unicode_property_name)
      (unicode_property_value)
    )
  )))
))

===================
atom escapes - lone unicode property names
===================
\p{Decimal_Number}
---

(pattern (term
  (atom (atom_escape (character_class_escape
    (unicode_property_value_expression
      (unicode_property_value)
    )
  )))
))

===================
capturing groups
===================
hello (.*)
---

(pattern (term
  (atom (pattern_character))
  (atom (pattern_character))
  (atom (pattern_character))
  (atom (pattern_character))
  (atom (pattern_character))
  (atom (pattern_character))
  (atom (anonymous_capturing_group
    (pattern (term
      (atom) (quantifier (quantifier_prefix))
    ))
  ))
))


===================
named capturing groups
===================
(?<world>.*)
---

(pattern (term
  (atom (named_capturing_group
    (group_name)
    (pattern (term
      (atom) (quantifier (quantifier_prefix))
    ))
  ))
))

===================
a date regex
===================
(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})
---
(pattern (term
  (atom (named_capturing_group (group_name) (pattern (term
    (atom (character_class (class_range (class_atom) (class_atom))))
    (quantifier (quantifier_prefix (count_quantifier (decimal_digits))))
  ))))
  (atom (pattern_character))
  (atom (named_capturing_group (group_name) (pattern (term
    (atom (character_class (class_range (class_atom) (class_atom))))
    (quantifier (quantifier_prefix (count_quantifier (decimal_digits))))
  ))))
  (atom (pattern_character))
  (atom (named_capturing_group (group_name) (pattern (term
    (atom (character_class (class_range (class_atom) (class_atom))))
    (quantifier (quantifier_prefix (count_quantifier (decimal_digits))))
  ))))
))

===================
a multiline url regex
===================
[-a-zA-Z0-9@:%._\+~#=]{2,256}
\.[a-z]{2,6}\b(
[-a-zA-Z0-9@:%_\+.~#?&//=]*
)
---

(pattern (term
  (atom (character_class
    (class_range (class_atom))
    (class_range (class_atom) (class_atom))
    (class_range (class_atom) (class_atom))
    (class_range (class_atom) (class_atom))
    (class_range (class_atom))
    (class_range (class_atom))
    (class_range (class_atom))
    (class_range (class_atom))
    (class_range (class_atom))
    (class_range (class_atom (class_escape (character_escape (identity_escape)))))
    (class_range (class_atom))
    (class_range (class_atom))
    (class_range (class_atom))
  ))
  (quantifier (quantifier_prefix (count_quantifier
    (decimal_digits) (decimal_digits)
  )))
  (atom (atom_escape (character_escape (identity_escape))))
  (atom (character_class (class_range (class_atom) (class_atom))))
  (quantifier (quantifier_prefix (count_quantifier
    (decimal_digits) (decimal_digits)
  )))
  (atom (assertion))
  (atom (anonymous_capturing_group (pattern (term
    (atom (character_class
      (class_range (class_atom))
      (class_range (class_atom) (class_atom))
      (class_range (class_atom) (class_atom))
      (class_range (class_atom) (class_atom))
      (class_range (class_atom))
      (class_range (class_atom))
      (class_range (class_atom))
      (class_range (class_atom))
      (class_range (class_atom (class_escape
        (character_escape (identity_escape))
      )))
      (class_range (class_atom))
      (class_range (class_atom))
      (class_range (class_atom))
      (class_range (class_atom))
      (class_range (class_atom))
      (class_range (class_atom))
      (class_range (class_atom))
      (class_range (class_atom))
    ))
    (quantifier (quantifier_prefix))
  ))))
))
